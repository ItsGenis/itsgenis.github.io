<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ItsGenis</title>
    <description>Web developer, photographer, kickboxer and smoothie-maker extraordinaire.</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 12 Aug 2022 13:39:50 +0200</pubDate>
    <lastBuildDate>Fri, 12 Aug 2022 13:39:50 +0200</lastBuildDate>
    <generator>Jekyll v3.6.3</generator>

    
      <item>
        <title>Bye, Twitter</title>
        <description>&lt;p&gt;Back in 2019 I deleted my Facebook account. I did it a couple of days before my birthday and it was fun seeing who actually cared and sent best wishes on the day, without the social network reminder. I’m not someone who cares about these things, but it was an interesting experiment nonetheless. Social platforms have completely rewired how we live our lives, we act in ways they make us, instead of acting the way we want as individuals.&lt;/p&gt;

&lt;p&gt;Back then I found myself scrolling through Facebook on my phone or laptop, much more than I would like to admit, through many stuff I didn’t care about. It’s been a few years and I don’t regret what I did at all, I’ve never missed it nor I had any kind of FOMO.&lt;/p&gt;

&lt;p&gt;I still kept my Instagram, since I’m a &lt;a href=&quot;https://instagram.com/derrameventricular&quot;&gt;photographer on my free time&lt;/a&gt; and I could find value in it; and I kept my Twitter since it seemed like it was the place for every developer to be.&lt;/p&gt;

&lt;p&gt;I could find value in Twitter by following experts from my day-to-day technologies at work and keeping up with the buzztalk. But again, over the years, I’ve been finding myself scrolling over stuff I don’t care about, stuff I don’t even follow, and it’s been getting worse and worse. These companies don’t care about what you care, they care about keeping you hooked on their site. And I’m fed up. I make my own decisions. I choose the content I want to consume. Me. Not some fucked up algorithm.&lt;/p&gt;

&lt;p&gt;So I guess for the time being I’ll keep up with what I care with newsletters, something that is curated by people who I want to hear and read.&lt;/p&gt;

&lt;p&gt;Farewell, Twitter.&lt;/p&gt;
</description>
        <pubDate>Fri, 12 Aug 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/2022/08/12/bye-twitter/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/08/12/bye-twitter/</guid>
      </item>
    
      <item>
        <title>TIL: Store functions in React's useState()</title>
        <description>&lt;p&gt;&lt;em&gt;I’m starting a new category of low effort posts where I just store small doses of knowledge.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you want to store a function into a React’s &lt;code class=&quot;highlighter-rouge&quot;&gt;useState()&lt;/code&gt; you should store an anonymous function that returns the function you’d like to store, like so:&lt;/p&gt;

&lt;div class=&quot;language-typescript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someFunctionToStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;setFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;someFunctionToStore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Otherwise the stored function will be called in one of the React hooks cycles, and we don’t want that.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Aug 2020 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/2020/08/19/store-functions-react-usestate/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/08/19/store-functions-react-usestate/</guid>
      </item>
    
      <item>
        <title>Structuring routes and its namespaces with ExpressJS</title>
        <description>&lt;p&gt;&lt;em&gt;Note: This post assumes a little bit of knowledge on ExpressJS. You may be able to follow along anyways but I haven’t made the effort.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I haven’t played much with NodeJS in the past but this coming weeks I will be developing an API with ExpressJS, so exciting times ahead.&lt;/p&gt;

&lt;p&gt;At work we already have some NodeJS APIs on production, but going over its source code there are some things that just feel wrong, one of them being the way they structure the routing.&lt;/p&gt;

&lt;p&gt;The existing APIs have a single routing file per module, with every route declaration and its logic. For instance, the endpoints where you ask for a &lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt; collection and where you &lt;em&gt;create&lt;/em&gt; a &lt;code class=&quot;highlighter-rouge&quot;&gt;profile&lt;/code&gt; are declared in the same file, and its inner logic after them. Also any other CRUD action related to this two resources, or any other resource related to the same module, are located in this file. As you can imagine, this goes thousands of lines down.&lt;/p&gt;

&lt;p&gt;So basically what I did is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Separate routes by namespaces&lt;/li&gt;
  &lt;li&gt;Adopt a route/controller pattern&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the directory/files structure I aimed for:
&lt;img src=&quot;https://www.dor3nz.com/content/images/2019/02/image-2.png&quot; alt=&quot;&quot; /&gt;
Here’s how I went about the implementation. First of all, we instantiate the module routes at the top level (in our case it’s in an &lt;code class=&quot;highlighter-rouge&quot;&gt;app.js&lt;/code&gt;, I’ve seen people using &lt;code class=&quot;highlighter-rouge&quot;&gt;server.js&lt;/code&gt; but at the end of the day it’s the file used to bootstrap the app, referenced in the &lt;code class=&quot;highlighter-rouge&quot;&gt;www&lt;/code&gt; file):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require(&quot;express&quot;);
var app = express();
var coreRoutes = require(&quot;./modules/core/core.routes&quot;);

// Declare the /core namespace as an entry point for any route
// related to the core module.
app.use(&quot;/core&quot;, coreRoutes);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we declare the namespaces that belong to the core module, inside core.routes.js:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var express = require(&quot;express&quot;);
var app = express();
var usersRoutes = require(&quot;./users/users.routes&quot;);
var profilesRoutes = require(&quot;./profiles/profiles.routes&quot;);

app.use(&quot;/users&quot;, usersRoutes);
app.use(&quot;/profiles&quot;, profilesRoutes);

module.exports = app;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we can declare the specific resource routes, e.g. for users at users.routes.js:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var app = require(&quot;express&quot;);
var router = app.Router();
var usersController = require(&quot;./users.controller&quot;);

router.get(&quot;/&quot;, usersController.index);
router.get(&quot;/:id&quot;, usersController.show);

module.exports = router;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see we are referencing the &lt;code class=&quot;highlighter-rouge&quot;&gt;usersController&lt;/code&gt; , so here’s how I implemented it in users.controller.js:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;exports.index = (req, res) =&amp;gt; {
  res.json({ respose: &quot;hello, we are the user collection!&quot; });
};

exports.show = (req, res) =&amp;gt; {
  res.json({ response: &quot;hello, I am user &quot; + req.params.id });
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we can access our API at &lt;code class=&quot;highlighter-rouge&quot;&gt;core/users/&lt;/code&gt; for the users collection or at &lt;code class=&quot;highlighter-rouge&quot;&gt;/core/users/1&lt;/code&gt; to check user with id 1. We would repeat the same process for the profiles resource. Of course the real logic is quite more complicated and I might add services to the pattern if I see the need to.&lt;/p&gt;

&lt;p&gt;Point is, now I have a structured directory, much more easy to maintain and understand.&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/20/routing-namespaces-with-expressjs/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/20/routing-namespaces-with-expressjs/</guid>
      </item>
    
      <item>
        <title>Importing scss variables files without relative routes in Angular 6+</title>
        <description>&lt;p&gt;Or how to style tomatoes across your app with one single variable.&lt;/p&gt;

&lt;p&gt;I’ve been doing a lot of things around Angular lately, but none of them are styling. So today I had to style some stuff and, of course, I wanted to declare some reusable variables, you know, DRY and all, and found out that the &lt;code class=&quot;highlighter-rouge&quot;&gt;~&lt;/code&gt; character &lt;a href=&quot;https://netbasal.com/angular-cli-and-global-sass-variables-a1b92d8ca9b7&quot;&gt;trick&lt;/a&gt; is &lt;a href=&quot;https://github.com/angular/angular-cli/issues/10077&quot;&gt;not&lt;/a&gt;&lt;a href=&quot;https://github.com/angular/angular-cli/issues/1253&quot;&gt;working&lt;/a&gt; in the latest versions of the framework CLI.&lt;/p&gt;

&lt;p&gt;But there’s a workaround.&lt;/p&gt;

&lt;p&gt;So, imagine we have our nice  &lt;code class=&quot;highlighter-rouge&quot;&gt;/src/assets/styles/_colors.scss&lt;/code&gt; file where we declare our shiny colors:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$fruitColor: tomato;
// some other less important colors
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So, the way we do our shenanigans now is by adding this cute little &lt;code class=&quot;highlighter-rouge&quot;&gt;stylePreprocessorOptions.includePaths&lt;/code&gt; in our &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; file, inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.options&lt;/code&gt; property:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;build&quot;:{
   &quot;builder&quot;:&quot;@angular-devkit/build-angular:browser&quot;,
   &quot;options&quot;:{
      &quot;stylePreprocessorOptions&quot;:{
         &quot;includePaths&quot;:[
            &quot;src/assets/styles&quot;
         ]
      }
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And now we can do the following in any of our scss files:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@import '_colors';

.fruit.tomato {
  color: $fruitColor;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And that’s it. Happy tomato styling.&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/18/importing-scss-variables-files-without-relative-routes-in-angular-6/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/18/importing-scss-variables-files-without-relative-routes-in-angular-6/</guid>
      </item>
    
      <item>
        <title>The Morning Society</title>
        <description>&lt;p&gt;As I step outside, the block’s main door closes behind me. I perceive the usual orange colour dyeing the city, caused by the streetlights blending with today’s dawn. I take my headphones off my pocket and start to untangle them whilst I sense the scent of the petrichor from this night’s rain drenching the air. Once I’m done with the humdrum puzzle, I plug the headphones into my phone and “nihilist blues” starts playing. Above the song’s title, my phone reminds me it’s 7:30 AM. I remind myself I have somewhere to be.&lt;/p&gt;

&lt;p&gt;I very rarely walk to work. My lack of habit reveals itself at every turn when I hesitate about which path to take. Freed from the mandatory driving concentration, I seize the rare opportunity to observe around me while I keep perambulating the city.&lt;/p&gt;

&lt;p&gt;I see cars racing to barely make it past the amber light and people walking in an anxious fast-paced manner in all directions. People running through crosswalks to catch the bus, yet not all of them make it, some remain panting at the stop despondently gazing at their ride disappearing in the distance. Everyone seems so wrapped in themselves, it’s almost as if I’m walking through an egotistical fair. At one point, I have to quickly get off the sidewalk to avoid getting overrun by a mother and his son in an obvious hurry, back up again and I scarcely dodge a teenager who is rapidly typing something in her phone like it’s a matter of life and death. As I get back on track — once again — I can’t help but to think about &lt;em&gt;the&lt;/em&gt; quote from The Wolf in *Pulp Fiction, *which probably is my subconscious trying to shed some humour into the matter.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;That’s thirty minutes away. I’ll be there in ten. (Pulp Fiction, 1994)&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I turn again, and I stop to stare at an ugly graffiti. Its red letters read: “&lt;em&gt;I am the one who loves the greatest girl in this fucking world! I love you!&lt;/em&gt;”. I chuckle. I’m not sure why though, is it that I feel privileged to be standing still at this very moment, or maybe that the only sign of human benevolence that I’ve found this morning is in an ugly painting on a wall?
&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*c1nGxOIZtsGayLJehj0Unw.png&quot; alt=&quot;&quot; /&gt;The Ugly Graffiti — Source: Google Street View
Either way, I resume my walking. Short before I arrive at my destination, I catch a whiff of pot. In front of me there’s this young guy in a hoodie who, almost without noticing, I’ve already left behind. I internally joke about how this must be the only person in the city who is walking slower than me today.&lt;/p&gt;

&lt;p&gt;When I finally reach to the office, instead of getting inside, I pass by. Not very far ahead there is the cafeteria, where I get in. Inside, I notice a woman in her thirties, she is drinking a take-away coffee in a hurry while searching her purse for the cash to pay. I overhear her telling the waitress that her child is waiting in the car just before she pays and leaves.&lt;/p&gt;

&lt;p&gt;As I am about to order my usual take-away breakfast I reconsider and — just for today — decide to sit at one of the tables instead. From there, I watch how stressed people come in and out of the cafeteria while I enjoy my morning tea.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn-images-1.medium.com/max/1600/1*yVAzRFG19uxbdRSeEqHGtQ.jpeg&quot; alt=&quot;&quot; /&gt;Photo by &lt;a href=&quot;https://unsplash.com/photos/vATgbfp7oXA?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Adeolu Eletu&lt;/a&gt; on &lt;a href=&quot;https://unsplash.com/?utm_source=unsplash&amp;amp;utm_medium=referral&amp;amp;utm_content=creditCopyText&quot;&gt;Unsplash&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/12/the-morning-society/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/12/the-morning-society/</guid>
      </item>
    
      <item>
        <title>Running specs outside src in Angular</title>
        <description>&lt;h4 id=&quot;motivation&quot;&gt;Motivation&lt;/h4&gt;

&lt;p&gt;I was a bit hesitant to write this one down because of its triviality, but since I had to dig a little myself to work it out, here it goes. May it serve anyone or even my future self.&lt;/p&gt;

&lt;p&gt;By our current client requirements, we have some modules that are shared across different apps living inside a mono-repo. The apps are mainly their own bootstrapping where we insert the other modules. This modules live within a &lt;code class=&quot;highlighter-rouge&quot;&gt;modules/&lt;/code&gt; directory, at the same level that the src folder is placed.&lt;/p&gt;

&lt;p&gt;The way Angular CLI works, when running &lt;code class=&quot;highlighter-rouge&quot;&gt;ng test&lt;/code&gt; in an app’s directory, Karma runs all of the test files ending with &lt;code class=&quot;highlighter-rouge&quot;&gt;spec.ts&lt;/code&gt; that are inside the src directory. What I wanted to achieve was to also run the spec files inside the modules folder using the same command.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;p&gt;Let’s start by having a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng test&lt;/code&gt; configuration inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;test&quot;: {
  &quot;builder&quot;: &quot;@angular-devkit/build-angular:karma&quot;,
  &quot;options&quot;: {
    &quot;main&quot;: &quot;src/test.ts&quot;,
    &quot;polyfills&quot;: &quot;src/polyfills.ts&quot;,
    &quot;tsConfig&quot;: &quot;src/tsconfig.spec.json&quot;,
    &quot;karmaConfig&quot;: &quot;src/karma.conf.js&quot;,
    &quot;styles&quot;: [
      &quot;src/styles.scss&quot;
    ],
    &quot;scripts&quot;: [],
    &quot;assets&quot;: [
      &quot;src/favicon.ico&quot;,
      &quot;src/assets&quot;
    ]
  }
},
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The bits that are relevant here are the &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;main&quot;: &quot;src/test.ts&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;tsConfig&quot;: &quot;src/tsconfig.spec.json&quot;&lt;/code&gt;, where the testing environment is initialised and where the files to be compiled by the typescript compiler (and its options) are specified, respectively.&lt;/p&gt;

&lt;p&gt;If we have a look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;test.ts&lt;/code&gt; file we can see how the testing environment is initialised and how, using Webpack’s &lt;code class=&quot;highlighter-rouge&quot;&gt;require.context()&lt;/code&gt;, the test files are being loaded. It is possible to load extra files, in this case our modules context, following the same steps by adding this two lines at the end of the file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const moduleContext = require.context('./../modules', true, /\.spec\.ts$/);
moduleContext.keys().map(moduleContext);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, the last step is to specify our spec files for the typescript compiler inside &lt;code class=&quot;highlighter-rouge&quot;&gt;tsconfig.spec.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;include&quot;: [
  &quot;**/*.spec.ts&quot;,
  &quot;**/*.d.ts&quot;,
  &quot;../modules/**/*.spec.ts&quot;
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;ng test&lt;/code&gt; after this little changes will run the tests from inside src (as usual) plus the ones inside the modules folder.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;This is all for today. Thank you for reading and feel free to reach me on &lt;a href=&quot;https://twitter.com/dor3nz&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/12/running-specs-outside-src-in-angular/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/12/running-specs-outside-src-in-angular/</guid>
      </item>
    
      <item>
        <title>Custom checks on Bitbucket pipelines with npm scripts (part I)</title>
        <description>&lt;p&gt;&lt;em&gt;Disclaimer: I never got to write part II, still leaving this here for memorabilia. Original post &lt;a href=&quot;https://medium.com/@Dor3nz/custom-checks-on-bitbucket-pipelines-with-npm-scripts-part-i-4686d5e77880&quot;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Working in a team, with pull request features with code review, and some sort of automation with a CI to prevent the merge of failing tests or &lt;em&gt;non&lt;/em&gt;-_linted_ code into your master branch. Sounds familiar?&lt;/p&gt;

&lt;p&gt;But, why should we stop at tests, or &lt;em&gt;linting&lt;/em&gt;? What I’m going to explain here is for Bitbucket pipelines, mainly because it is what I’ve been using recently. But I’m pretty sure the idea and core concepts behind it are applicable to other CIs.&lt;/p&gt;

&lt;h3 id=&quot;our-use-case&quot;&gt;Our use case&lt;/h3&gt;

&lt;p&gt;We work on multi-platform development with Nativescript and Angular. If you ever worked on mobile you know versioning is some serious stuff, so we wanted to make sure we didn’t skip versions when adding new features to our application.&lt;/p&gt;

&lt;p&gt;We use semantic versioning, so automating the version bump made no sense as there is no way you can automatically decide if you are bumping a major, minor or patch version. We concluded that the specific number for the upcoming version had to be decided by the developer presenting the feature on his or her pull request.&lt;/p&gt;

&lt;h3 id=&quot;our-solution&quot;&gt;Our solution&lt;/h3&gt;

&lt;p&gt;As you may have already guessed, our solution is to add a check on our Bitbucket repository pipelines, which is an integrated CI for Bitbucket, similar to CircleCI or TravisCI if you’ve ever worked with them on Github.&lt;/p&gt;

&lt;h4 id=&quot;the-setup&quot;&gt;The setup&lt;/h4&gt;

&lt;p&gt;Our script is going to check that the incoming version — &lt;em&gt;the version set by the developer on its feature branch&lt;/em&gt;- is valid, i.e. superior than the current one.&lt;/p&gt;

&lt;p&gt;To be sure of that we need two references, the current version and the incoming version. We decided that the incoming version should be the one defined in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; at the root of our source code, and this and only this reference to the version code is what the developer must update.&lt;/p&gt;

&lt;p&gt;We also needed a version reference to compare to when running our script, and we decided to put it in a &lt;code class=&quot;highlighter-rouge&quot;&gt;version-lock.json&lt;/code&gt; file also at the root of our app. This file would only contain the current version, like so:&lt;/p&gt;

&lt;p&gt;{ “version”: “1.0.0” }&lt;/p&gt;

&lt;h4 id=&quot;implementation&quot;&gt;Implementation&lt;/h4&gt;

&lt;p&gt;A quick note: the key to make this work is that we would take advantage of pipelines again, after the feature branch was merged, to run a script that would update this number with the current one at &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, thus making sure the cycle is completed and non-complying pull requests coming later on would be blocked in a reliable way.&lt;/p&gt;

&lt;p&gt;Moving on to the fun stuff, first thing to do was defining the script in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; and creating the &lt;code class=&quot;highlighter-rouge&quot;&gt;js&lt;/code&gt; file that contained the logic:&lt;/p&gt;

&lt;p&gt;package.json:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;scripts&quot;: {
    &quot;version-check&quot;: &quot;node version-check.js&quot;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;version-check.js&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function versionCheck() {
  // Compare package.json version to version-lock.json
  // log() if success
  // throw() on error
}

try { versionCheck(); } catch(error) { throw(error); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I can’t really dive into the implementation of the script, but the important thing to know is that *&lt;strong&gt;*a pipeline will fail when a command exits with a non-zero exit code**&lt;/strong&gt;, e.g. a &lt;code class=&quot;highlighter-rouge&quot;&gt;throw()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After the script was created and defined in our &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; we could move on and tell the pipelines when to run it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;image: node:6.9.4

pipelines:
  default:
    - step:
        name: Build, test and check version
        caches:
          - node
        script:
          - npm install
          - npm run -- ng test --watch false --single-run true
          - npm run version-check
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see we placed it after our tests, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run version-check&lt;/code&gt; would run the script that we created before, and, if the dev forgot to bump the version the build would fail like this:
&lt;img src=&quot;https://www.dor3nz.com/content/images/2019/02/image.png&quot; alt=&quot;&quot; /&gt;The pipe failing because the version is not bumped.
This forces the developer to commit a new change with the bump and this way we are never forgetting to merge a new feature without updating the version. Ta-da!&lt;/p&gt;

&lt;h3 id=&quot;last-remarks&quot;&gt;Last remarks&lt;/h3&gt;

&lt;p&gt;I somehow teased it before: after merging, a new script on the pipelines should run and update the version on the &lt;code class=&quot;highlighter-rouge&quot;&gt;version-lock.js&lt;/code&gt;. But that includes making changes on the code, committing them and pushing them via ssh from the pipes. It sure is hella fun to do but it also will take a few more lines to explain so I’m going to leave this post as is, we will dive into that in the next part.&lt;/p&gt;

&lt;p&gt;Thank you for reading if you’ve made it so far, and please, if you have anything to say just say something in the comments or say hi to me on &lt;a href=&quot;http://twitter.com/dor3nz&quot;&gt;twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/12/custom-checks-on-bitbucket-pipelines-with-npm-scripts-part-i/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/12/custom-checks-on-bitbucket-pipelines-with-npm-scripts-part-i/</guid>
      </item>
    
      <item>
        <title>Compiling css in new Angular 6 libraries</title>
        <description>&lt;p&gt;&lt;em&gt;Disclaimer: This post was originally posted on &lt;a href=&quot;https://medium.com/@Dor3nz/compiling-css-in-new-angular-6-libraries-26f80274d8e5&quot;&gt;Medium&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Not so long ago Angular 6 &lt;a href=&quot;https://blog.angular.io/version-6-of-angular-now-available-cc56b0efa7a4&quot;&gt;was released&lt;/a&gt;, and with it we got the &lt;a href=&quot;https://github.com/angular/angular-cli/wiki/stories-create-library&quot;&gt;library support&lt;/a&gt;for the angular-cli.&lt;/p&gt;

&lt;p&gt;If you are anything like me, you probably started using it right out of the box. Problem is, right after I did, I got stuck with a small issue that is not yet supported in &lt;a href=&quot;https://github.com/dherges/ng-packagr&quot;&gt;ng-packagr&lt;/a&gt; (which is what Angular uses for the library system):&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*Compiling global styles.**&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Right now the ng-packagr is able to compile any styles file that is directly linked to a component in its &lt;code class=&quot;highlighter-rouge&quot;&gt;@Component&lt;/code&gt; decorator via the&lt;code class=&quot;highlighter-rouge&quot;&gt;stylesUrl&lt;/code&gt;property, but what If we want a global (think of it like a theme styles) to be imported in an optional way in our project when we install the library?&lt;/p&gt;

&lt;p&gt;So after digging a little bit and &lt;a href=&quot;https://github.com/dherges/ng-packagr/issues/839&quot;&gt;asking for some help&lt;/a&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-packagr&lt;/code&gt; repo here is where I got.&lt;/p&gt;

&lt;h3 id=&quot;lets-compile-the-css-ourselves&quot;&gt;Let’s compile the css ourselves&lt;/h3&gt;

&lt;p&gt;Go on and create a new library in your new shiny Angular 6 project:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ng generate library my-shiny-library&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now navigate to your new shiny library directory inside the project:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cd your-project/projects/my-shiny-library&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now, we are going to need to *&lt;strong&gt;*install some devDependencies**&lt;/strong&gt; in our library in order to bundle the css:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dherges/ng-packagr&quot;&gt;ng-packagr&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/scss-bundle&quot;&gt;scss-bundle&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/ts-node&quot;&gt;ts-node&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;scss-bundle is the tool to actually bundle the css and ts-node is a tool we will use to run a Typescript script to run the bundler that we will see in a moment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt;Note&lt;strong&gt;**&lt;/strong&gt;: Don’t forget to add a _&lt;code class=&quot;highlighter-rouge&quot;&gt;_.gitignore*&lt;/code&gt;* file inside the library directory to ignore _&lt;code class=&quot;highlighter-rouge&quot;&gt;_/node_modules*&lt;/code&gt;* in your version control.*&lt;/p&gt;

&lt;p&gt;Now I like to keep things organised, so go on and create a scripts directory within the library project and create a &lt;code class=&quot;highlighter-rouge&quot;&gt;css-bundle.ts&lt;/code&gt; (kudos to &lt;a href=&quot;https://github.com/alan-agius4&quot;&gt;Alan Agius&lt;/a&gt;for the script) file inside it:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import { relative } from 'path';
import { Bundler } from 'scss-bundle';
import { writeFile } from 'fs-extra';

/** Bundles all SCSS files into a single file */
async function bundleScss() {
  const { found, bundledContent, imports } = await new Bundler()
    .Bundle('./src/_theme.scss', ['./src/**/*.scss']);

  if (imports) {
    const cwd = process.cwd();

    const filesNotFound = imports
      .filter(x =&amp;gt; !x.found)
      .map(x =&amp;gt; relative(cwd, x.filePath));

    if (filesNotFound.length) {
      console.error(`SCSS imports failed \n\n${filesNotFound.join('\n - ')}\n`);
      throw new Error('One or more SCSS imports failed');
    }
  }

  if (found) {
    await writeFile('./dist/_theme.scss', bundledContent);
  }
}

bundleScss();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In order for this script to work, we need a &lt;code class=&quot;highlighter-rouge&quot;&gt;_theme.scss&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;/src&lt;/code&gt;directory of our library that actually *&lt;strong&gt;*contains and imports all the css that we want to bundle.**&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now we can define a postbuild npm script to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;css-bundle.ts&lt;/code&gt;, inside the library’s &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; let’s define the build and postbuild scripts:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &quot;scripts&quot;: {
    &quot;build&quot;: &quot;ng-packagr -p package.json&quot;,
    &quot;postbuild&quot;: &quot;ts-node ./scripts/css-bundle.ts&quot;
  },
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So basically the build script &lt;code class=&quot;highlighter-rouge&quot;&gt;ng-packagr -p package.json&lt;/code&gt; is the script that ng-packagr runs to build the library for distribution, and the postbuild script just runs the script that we set up above, the latter will be called just after the former thanks to the built-in post hooks from npm scripts.&lt;/p&gt;

&lt;p&gt;If we now run &lt;code class=&quot;highlighter-rouge&quot;&gt;npm run build&lt;/code&gt; from the root of the library we will get the build in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/dist&lt;/code&gt; folder with the compiled css.&lt;/p&gt;

&lt;p&gt;*&lt;strong&gt;*The only drawback**&lt;/strong&gt; from this approach is that we cannot take advantage of the angular-cli command &lt;code class=&quot;highlighter-rouge&quot;&gt;ng build --prod &amp;lt;library-name&amp;gt;&lt;/code&gt; since we are forced to build from the library’s directory, furthermore, we also need to *&lt;strong&gt;*manually copy the *dist* folder**&lt;/strong&gt; into the Angular project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;dist/&amp;lt;library-name&amp;gt;&lt;/code&gt; folder.&lt;/p&gt;

&lt;h3 id=&quot;using-the-styles-in-the-angular-project&quot;&gt;Using the styles in the Angular project&lt;/h3&gt;

&lt;p&gt;Now when you install the library in the Angular project (or copy it like we’ve seen above in dev), when you call whatever component you have in there it will not be styled, to import the styles into the project you will have to do so in the new &lt;code class=&quot;highlighter-rouge&quot;&gt;angular.json&lt;/code&gt; file that we got in Angular 6:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;            &quot;styles&quot;: [
              &quot;src/styles.scss&quot;,
              &quot;dist/my-shiny-library/_theme.scss&quot;
            ],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;*&lt;/strong&gt;Note&lt;strong&gt;**&lt;/strong&gt;: Here we are using &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*dist*&lt;/code&gt;&lt;/em&gt; but if you have installed as a npm package remember to use &lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;*node_modules*&lt;/code&gt;&lt;/em&gt; ;)*&lt;/p&gt;

&lt;h3 id=&quot;last-words&quot;&gt;Last words&lt;/h3&gt;

&lt;p&gt;Once more, thank you to Alan Agius to &lt;a href=&quot;https://github.com/dherges/ng-packagr/issues/839&quot;&gt;aid me&lt;/a&gt; on this, and let’s hope that the new versions of the angular-cli bring some tooling to deal with this in the future.&lt;/p&gt;

&lt;p&gt;As always, feel free to join the discussion in the comments or ping me in &lt;a href=&quot;https://twitter.com/dor3nz?lang=en&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Cheers.&lt;/p&gt;
</description>
        <pubDate>Tue, 12 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/12/compiling-css-in-new-angular-6-libraries/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/12/compiling-css-in-new-angular-6-libraries/</guid>
      </item>
    
      <item>
        <title>The delivery in conference tech talks.</title>
        <description>&lt;p&gt;Originally posted on &lt;a href=&quot;https://medium.com/@Dor3nz/about-conference-talks-delivery-in-tech-c655e450e4a9&quot;&gt;Medium&lt;/a&gt; on 2017&lt;/p&gt;

&lt;p&gt;This last year I’ve been watching conference talks on nearly a daily basis, the main goal of this was to stay motivated at the same time that I was getting up to date with our constant evolving environment. I’ve also attended a couple of conferences during this time, and here’s the conclusion I came up with.&lt;/p&gt;

&lt;p&gt;The delivery of a talk is much more important than its content.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong, you don’t want to get up on stage if you don’t have anything interesting to share, but you also don’t want to make it look less interesting than it actually is by completely spoiling its delivery.&lt;/p&gt;

&lt;p&gt;The main goal of a speaker should be to share the passion or the interest about the topic being presented.&lt;/p&gt;

&lt;p&gt;We don’t attend talks to learn about internals or ways to do something, I think we all are proficient enough to go online and check the documentation of whatever it is you are pitching and start learning by ourselves.&lt;/p&gt;

&lt;p&gt;Feeling motivated, though, feeling like “I should use this new stuff, because it’s **** amazing!” now that’s the speaker’s job.&lt;/p&gt;

&lt;p&gt;If everything you’ve got for your delivery is reading through stuff out loud without any passion, I’m sorry, but I had enough of that at uni and I’d rather read the same in a blog post. It would save me time and probably appeal a lot more to me.&lt;/p&gt;
</description>
        <pubDate>Mon, 11 Feb 2019 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/2019/02/11/about-conference-talks-delivery-in-tech/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/02/11/about-conference-talks-delivery-in-tech/</guid>
      </item>
    

    
      
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>